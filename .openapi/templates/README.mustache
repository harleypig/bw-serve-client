# Bitwarden CLI Vault Management API

This module supports the [Bitwarden CLI Vault Management
API](https://bitwarden.com/help/vault-management-api/), available via
Bitwarden CLI's `bw serve` command.

If you're looking for Bitwarden's public api (for organizational tools and
stuff) that API is [here](https://bitwarden.com/help/api/).

Please note that this module won't be supporting email and master password
login to start with. It's not the most secure method, but pull requests are
welcome. Also, SSO support is low on the todo list, as the author doesn't use
it.

## Generated Code

This Python package is automatically generated by the [OpenAPI
Generator](https://openapi-generator.tech) project:

- API version: {{appVersion}}
- Package version: {{packageVersion}}
{{^hideGenerationTimestamp}}
- Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Generator version: {{generatorVersion}}
{{^hideBuildPackage}}
- Build package: {{generatorClass}}
{{/hideBuildPackage}}

## Requirements.

* Python {{{generatorLanguageVersion}}}

* [Bitwarden
    CLI](https://bitwarden.com/download/#downloads-command-line-interface)
  - Instructions can be found
    [here](https://bitwarden.com/help/cli/#download-and-install)

## Installation

### pip install

If the python package is hosted on a repository, you can install directly using:
```sh
pip install git+https://{{gitHost}}/{{{gitUserId}}}/{{{gitRepoId}}}.git
```
(you may need to run `pip` with root permission: `sudo pip install
git+https://{{gitHost}}/{{{gitUserId}}}/{{{gitRepoId}}}.git`)

Then import the package:
```python
import {{{packageName}}}
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).
```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import {{{packageName}}}
```

### Tests

Execute `pytest` to run the tests.

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python
{{#apiInfo}}{{#apis}}{{#-last}}{{#hasHttpSignatureMethods}}import datetime{{/hasHttpSignatureMethods}}{{/-last}}{{/apis}}{{/apiInfo}}
import time
import {{{packageName}}}
from {{{packageName}}}.rest import ApiException
from pprint import pprint
{{#apiInfo}}{{#apis}}{{#-first}}{{#operations}}{{#operation}}{{#-first}}
{{> python_doc_auth_partial}}

# Enter a context with an instance of the API client
{{#asyncio}}async {{/asyncio}}with {{{packageName}}}.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = {{{packageName}}}.{{{classname}}}(api_client)
    {{#allParams}}
    {{paramName}} = {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
    {{/allParams}}

    try:
        {{#summary}}
        # {{{.}}}
        {{/summary}}
        {{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}{{paramName}}={{paramName}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})
        {{#returnType}}
        print("The response of {{classname}}->{{operationId}}:\n")
        pprint(api_response)
        {{/returnType}}
    except ApiException as e:
        print("Exception when calling {{classname}}->{{operationId}}: %s\n" % e)
{{/-first}}{{/operation}}{{/operations}}{{/-first}}{{/apis}}{{/apiInfo}}
```

## Documentation for API Endpoints

{{#apiInfo}}{{#apis}}* [{{classname}}]({{apiDocPath}}{{classname}}.md)
{{/apis}}{{/apiInfo}}

## Documentation For Models

{{#models}}{{#model}}* [{{{classname}}}]({{modelDocPath}}{{{classname}}}.md)
{{/model}}{{/models}}
