# Pre-commit configuration for auto-fixes and comprehensive checking
#
# ⚠️  WARNING: This configuration makes automated changes to your code! ⚠️
#
# This config includes both:
# 1. Auto-fixing hooks that modify files
# 2. Check-only hooks from the default pre-commit config that don't have fix
#    options
#
# Run with:
#   pre-commit run -c .pre-commit-config-fix.yaml --all-files
---
repos:
  # 1. Basic file fixes (fastest, most fundamental)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
        description: Remove trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with newline

  # 2. Syntax validation (catches fundamental issues early)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-yaml
        description: Check YAML syntax
      - id: check-json
        description: Check JSON syntax
      - id: check-toml
        description: Check TOML syntax
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-added-large-files
        description: Check for large files
        args: ['--maxkb=1000']
      - id: check-case-conflict
        description: Check for case conflicts in filenames
      - id: debug-statements
        description: Check for debug statements (pdb, ipdb, etc.)
      - id: detect-private-key
        description: Detect private keys

  # 3. Poetry dependency management (affects all Python tools)
  - repo: local
    hooks:
      - id: poetry-check
        name: poetry-check
        entry: poetry check
        language: system
        description: Check pyproject.toml and lock file consistency
        pass_filenames: false
        always_run: true
      - id: poetry-lock
        name: poetry-lock
        entry: poetry lock
        language: system
        description: Update poetry.lock file
        pass_filenames: false
        always_run: true

  # 4. Python import organization (affects formatting)
  - repo: https://github.com/pycqa/isort
    rev: 7.0.0
    hooks:
      - id: isort
        description: Sort Python imports

  # 5. Python code formatting (affects linting)
  - repo: https://github.com/google/yapf
    rev: v0.43.0
    hooks:
      - id: yapf
        description: Format Python code with yapf
        args: ['--in-place']

  # 6. Python docstring formatting (affects docstring linting)
  - repo: https://github.com/DanielNoord/pydocstringformatter
    rev: v0.7.0
    hooks:
      - id: pydocstringformatter
        description: Format Python docstrings
        args: ["--write"]
        additional_dependencies:
          - tomli

  # 7. Python linting (after formatting fixes)
  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        description: Lint Python code with flake8
        additional_dependencies:
          - dlint
          - flake8-aaa
          - flake8-annotations
          - flake8-annotations-complexity
          - flake8-assertive
          - flake8-bugbear
          - flake8-clean-block
          - flake8-comprehensions
          - flake8-docstrings
          - flake8-docstrings-complete
          - flake8-isort
          - flake8-logging
          - flake8-picky-parentheses
          - flake8-pydocstyle
          - flake8-pyprojecttoml
          - flake8-pytest-style
          - flake8-raise
          - flake8-return
          - flake8-rst-docstrings
          - flake8-secure-coding-standard
          - flake8-simplify
          - flake8-type-checking
          - flake8-typing_imports
          - flake8-unused-arguments
          - mccabe
          - pycodestyle
          - pydoclint
          - pyflakes
          - tryceratops

  # 8. Type checking (after code structure is fixed)
  #    flake8-type-checking is more up to date
  #         - lxml
  #         - pydantic>=2.0.0
  #         - types-mock
  #         - types-requests

  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.406
    hooks:
      - id: pyright
        description: Type check Python code with pyright
        additional_dependencies:
          - deepdiff
          - requests>=2.25.0
          - pydantic>=2.0.0
          - pytest>=7.2.1
          - urllib3>=1.25.3

  # 9. Documentation checks (after docstring formatting)
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        description: Check Python docstring conventions

  # 10. Security scanning (after code is properly formatted)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        description: Security linter for Python
        args:
          - '--configfile'
          - 'pyproject.toml'

  # 11. Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        description: Lint and fix markdown files
        args: ['--fix']

  # 12. YAML linting (after YAML syntax validation)
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        description: Lint YAML files
        args: ['-d', 'relaxed']
