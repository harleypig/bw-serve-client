#!/bin/bash

# XXX: Experimenting with poetry-bumpversion plugin, can still use this to tag
#      and push unless some other poetry setting can do that.

#-----------------------------------------------------------------------------
# poetry version doesn't update the package, so we'll do it ourselves
[[ -z $POETRY_ACTIVE ]] && {
  echo "You must be in a poetry shell to bump a version."
  exit 1
}

valid_options='major|minor|patch|premajor|preminor|prepatch|prerelease'

#-----------------------------------------------------------------------------
usage() {
  msg="$@"
  cat << EOT

usage: ${0##*/} option [--next-phase] "message"

Valid options is one of ${valid_options//|/, }

'prerelease' also allows '--next-phase'

${0##*/} calls 'poetry version option [--next-phase]', updates
'bw_serve_client/__init__.py:__version__', then performs a git add, commit,
tag, and push.

EOT

  [[ -n $msg ]] && echo "!!! $msg"

  exit 1
}

#-----------------------------------------------------------------------------
declare -a popts
option="$1"
shift

echo "$option" | grep -qE "$valid_options" || usage "Invalid option: $option"
popts=("$option")

nextphase=
echo "$1" | grep -qE -- '-*next-?phase' && {
  [[ $option != 'prerelease' ]] \
    && usage "--next-phase only allowed with 'prerelease' option"

  popts+=('--next-phase')
  shift
}

tag_message="$@"
[[ -z $tag_message ]] && usage "tag message is required"

# Bump the version
poetry version "${popts[@]}" || {
  echo "Problem bumping poetry version"
  exit 1
}

# Capture the new version
version="$(poetry version -s)"

# Determining if poetry-bumpversion works better
## Update the __version__ variable in __init__.py
#sed -i "s/^__version__ = .*/__version__ = '$version'/" bw_serve_client/__init__.py

# Generate templates based on new version
# We are assuming everything has been committed, otherwise we'll have to add
# code to look for unexpected files and die if we find them.

logfile='gen.log'
echo "Generating version changes. Check '$logfile' for details."
bin/generate-api &> $logfile || {
  echo "Problem generating changes."
  exit 1
}

# Commit the change
git add .
git commit -m "Update version to $version"

# Tag the commit with the provided message
git tag -a "$version" -m "$tag_message"

# Push the changes and tags to the remote repository
#git push origin main --tags
