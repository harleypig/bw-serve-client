# coding: utf-8

"""
    Vault Management API

    This schema documents the endpoints available to the Vault Management API, accessible from the Bitwarden CLI using the `bw serve` command ([learn more](https://bitwarden.com/help/cli/)). If you're looking for the **Organization Management** API, refer instead to [this document](https://bitwarden.com/help/api/).

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class ItemIdentity(BaseModel):
    """
    ItemIdentity
    """
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    address3: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    company: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    license_number: Optional[StrictStr] = Field(None, alias="licenseNumber")
    middle_name: Optional[StrictStr] = Field(None, alias="middleName")
    passport_number: Optional[StrictStr] = Field(None, alias="passportNumber")
    phone: Optional[StrictStr] = None
    postal_code: Optional[StrictStr] = Field(None, alias="postalCode")
    ssn: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["address1", "address2", "address3", "city", "company", "country", "email", "firstName", "lastName", "licenseNumber", "middleName", "passportNumber", "phone", "postalCode", "ssn", "state", "title", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ItemIdentity:
        """Create an instance of ItemIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ItemIdentity:
        """Create an instance of ItemIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ItemIdentity.parse_obj(obj)

        _obj = ItemIdentity.parse_obj({
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "address3": obj.get("address3"),
            "city": obj.get("city"),
            "company": obj.get("company"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "license_number": obj.get("licenseNumber"),
            "middle_name": obj.get("middleName"),
            "passport_number": obj.get("passportNumber"),
            "phone": obj.get("phone"),
            "postal_code": obj.get("postalCode"),
            "ssn": obj.get("ssn"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "username": obj.get("username")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


