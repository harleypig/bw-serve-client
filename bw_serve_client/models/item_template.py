# coding: utf-8

"""
    Vault Management API

    This schema documents the endpoints available to the Vault Management API, accessible from the Bitwarden CLI using the `bw serve` command ([learn more](https://bitwarden.com/help/cli/)). If you're looking for the **Organization Management** API, refer instead to [this document](https://bitwarden.com/help/api/).

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from bw_serve_client.models.field import Field
from bw_serve_client.models.item_card import ItemCard
from bw_serve_client.models.item_identity import ItemIdentity
from bw_serve_client.models.item_login import ItemLogin
from bw_serve_client.models.item_secure_note import ItemSecureNote

class ItemTemplate(BaseModel):
    """
    ItemTemplate
    """
    card: Optional[ItemCard] = None
    collection_ids: Optional[conlist(StrictStr)] = Field(None, alias="collectionIds")
    favorite: Optional[StrictBool] = None
    fields: Optional[conlist(Field)] = None
    folder_id: Optional[StrictStr] = Field(None, alias="folderId")
    identity: Optional[ItemIdentity] = None
    login: Optional[ItemLogin] = None
    name: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = Field(None, alias="organizationId")
    reprompt: Optional[StrictInt] = None
    secure_note: Optional[ItemSecureNote] = Field(None, alias="secureNote")
    type: Optional[Int] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["card", "collectionIds", "favorite", "fields", "folderId", "identity", "login", "name", "notes", "organizationId", "reprompt", "secureNote", "type"]

    @validator('reprompt')
    def reprompt_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 1):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('1', '2', '3', '4'):
            raise ValueError("must be one of enum values ('1', '2', '3', '4')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ItemTemplate:
        """Create an instance of ItemTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of login
        if self.login:
            _dict['login'] = self.login.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secure_note
        if self.secure_note:
            _dict['secureNote'] = self.secure_note.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ItemTemplate:
        """Create an instance of ItemTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ItemTemplate.parse_obj(obj)

        _obj = ItemTemplate.parse_obj({
            "card": ItemCard.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "collection_ids": obj.get("collectionIds"),
            "favorite": obj.get("favorite"),
            "fields": [Field.from_dict(_item) for _item in obj.get("fields")] if obj.get("fields") is not None else None,
            "folder_id": obj.get("folderId"),
            "identity": ItemIdentity.from_dict(obj.get("identity")) if obj.get("identity") is not None else None,
            "login": ItemLogin.from_dict(obj.get("login")) if obj.get("login") is not None else None,
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "organization_id": obj.get("organizationId"),
            "reprompt": obj.get("reprompt"),
            "secure_note": ItemSecureNote.from_dict(obj.get("secureNote")) if obj.get("secureNote") is not None else None,
            "type": obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


