# coding: utf-8

"""
    Vault Management API

    This schema documents the endpoints available to the Vault Management API, accessible from the Bitwarden CLI using the `bw serve` command ([learn more](https://bitwarden.com/help/cli/)). If you're looking for the **Organization Management** API, refer instead to [this document](https://bitwarden.com/help/api/).

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import field_validator, ConfigDict, BaseModel, Field, StrictBool, StrictInt, StrictStr
from bw_serve_client.models.send_text import SendText


class SendTemplate(BaseModel):
    """
    SendTemplate
    """
    deletion_date: Optional[datetime] = Field(None, alias="deletionDate")
    disabled: Optional[StrictBool] = None
    expiration_date: Optional[datetime] = Field(None, alias="expirationDate")
    file: Optional[StrictStr] = None
    hide_email: Optional[StrictBool] = Field(None, alias="hideEmail")
    max_access_count: Optional[StrictInt] = Field(None, alias="maxAccessCount")
    name: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    text: Optional[SendText] = None
    type: Optional[StrictInt] = None
    additional_properties: Dict[str, Any] = {}
    __properties = [
        "deletionDate", "disabled", "expirationDate", "file", "hideEmail",
        "maxAccessCount", "name", "notes", "password", "text", "type"
    ]

    @field_validator('type')
    @classmethod
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 1):
            raise ValueError("must be one of enum values (0, 1)")
        return value
    model_config = ConfigDict(populate_by_name=True, validate_assignment=True)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SendTemplate:
        """Create an instance of SendTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={"additional_properties"},
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SendTemplate:
        """Create an instance of SendTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SendTemplate.parse_obj(obj)

        _obj = SendTemplate.parse_obj({
            "deletion_date":
            obj.get("deletionDate"),
            "disabled":
            obj.get("disabled"),
            "expiration_date":
            obj.get("expirationDate"),
            "file":
            obj.get("file"),
            "hide_email":
            obj.get("hideEmail"),
            "max_access_count":
            obj.get("maxAccessCount"),
            "name":
            obj.get("name"),
            "notes":
            obj.get("notes"),
            "password":
            obj.get("password"),
            "text":
            SendText.from_dict(obj.get("text"))
            if obj.get("text") is not None else None,
            "type":
            obj.get("type")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
