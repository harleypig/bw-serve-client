# coding: utf-8

"""
    Vault Management API

    This schema documents the endpoints available to the Vault Management API, accessible from the Bitwarden CLI using the `bw serve` command ([learn more](https://bitwarden.com/help/cli/)). If you're looking for the **Organization Management** API, refer instead to [this document](https://bitwarden.com/help/api/).

    The version of the OpenAPI document: latest
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class StatusDataTemplate(BaseModel):
    """
    StatusDataTemplate
    """
    last_sync: Optional[datetime] = Field(None, alias="lastSync")
    server_url: Optional[StrictStr] = Field(None, alias="serverUrl")
    status: Optional[StrictStr] = None
    user_email: Optional[StrictStr] = Field(None, alias="userEmail")
    user_id: Optional[StrictStr] = Field(None, alias="userID")
    additional_properties: Dict[str, Any] = {}
    __properties = ["lastSync", "serverUrl", "status", "userEmail", "userID"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('locked', 'unlocked', 'unauthenticated'):
            raise ValueError("must be one of enum values ('locked', 'unlocked', 'unauthenticated')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StatusDataTemplate:
        """Create an instance of StatusDataTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StatusDataTemplate:
        """Create an instance of StatusDataTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StatusDataTemplate.parse_obj(obj)

        _obj = StatusDataTemplate.parse_obj({
            "last_sync": obj.get("lastSync"),
            "server_url": obj.get("serverUrl"),
            "status": obj.get("status"),
            "user_email": obj.get("userEmail"),
            "user_id": obj.get("userID")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


