{
  "components": {
    "schemas": {
      "collection": {
        "properties": {
          "externalId": {
            "type": "string"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/group"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "organizationId": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "field": {
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              0,
              1,
              2,
              3
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "folder": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "group": {
        "properties": {
          "hidePasswords": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          }
        }
      },
      "item.card": {
        "properties": {
          "brand": {
            "enum": [
              "visa"
            ],
            "type": "string"
          },
          "cardholderName": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "expMonth": {
            "type": "string"
          },
          "expYear": {
            "type": "string"
          },
          "number": {
            "type": "string"
          }
        }
      },
      "item.identity": {
        "properties": {
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "address3": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "licenseNumber": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "passportNumber": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "ssn": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "item.login": {
        "properties": {
          "password": {
            "type": "string"
          },
          "totp": {
            "type": "string"
          },
          "uris": {
            "$ref": "#/components/schemas/uris"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "item.secureNote": {
        "properties": {
          "type": {
            "enum": [
              0
            ],
            "type": "integer"
          }
        }
      },
      "item.template": {
        "properties": {
          "card": {
            "$ref": "#/components/schemas/item.card"
          },
          "collectionIds": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "favorite": {
            "type": "boolean"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/field"
            },
            "type": "array"
          },
          "folderId": {
            "format": "uuid",
            "type": "string"
          },
          "identity": {
            "$ref": "#/components/schemas/item.identity"
          },
          "login": {
            "$ref": "#/components/schemas/item.login"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "organizationId": {
            "format": "uuid",
            "type": "string"
          },
          "reprompt": {
            "enum": [
              0,
              1
            ],
            "type": "integer"
          },
          "secureNote": {
            "$ref": "#/components/schemas/item.secureNote"
          },
          "type": {
            "enum": [
              1,
              2,
              3,
              4
            ],
            "type": "int"
          }
        }
      },
      "lockunlock.success": {
        "properties": {
          "data": {
            "properties": {
              "message": {
                "type": "string"
              },
              "noColor": {
                "type": "boolean"
              },
              "object": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "send.template": {
        "properties": {
          "deletionDate": {
            "format": "date-time",
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "file": {
            "type": "string"
          },
          "hideEmail": {
            "type": "boolean"
          },
          "maxAccessCount": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "text": {
            "$ref": "#/components/schemas/send.text"
          },
          "type": {
            "enum": [
              0,
              1
            ],
            "type": "integer"
          }
        }
      },
      "send.text": {
        "properties": {
          "hidden": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "status": {
        "properties": {
          "data": {
            "properties": {
              "object": {
                "enum": [
                  "template"
                ],
                "type": "string"
              },
              "template": {
                "properties": {
                  "lastSync": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "serverUrl": {
                    "format": "hostname",
                    "type": "string"
                  },
                  "status": {
                    "enum": [
                      "locked",
                      "unlocked",
                      "unauthenticated"
                    ],
                    "type": "string"
                  },
                  "userEmail": {
                    "format": "email",
                    "type": "string"
                  },
                  "userID": {
                    "format": "uuid",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "uris": {
        "properties": {
          "match": {
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "type": "integer"
          },
          "uri": {
            "type": "string"
          }
        }
      }
    }
  },
  "info": {
    "description": "This schema documents the endpoints available to the Vault Management API, accessible from the Bitwarden CLI using the `bw serve` command ([learn more](https://bitwarden.com/help/cli/)). If you're looking for the **Organization Management** API, refer instead to [this document](https://bitwarden.com/help/api/).",
    "title": "Vault Management API",
    "version": "latest"
  },
  "openapi": "3.0.0",
  "paths": {
    "/attachment": {
      "post": {
        "description": "Attach a file to an existing vault item by specifying a unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path and the file in the request body.",
        "parameters": [
          {
            "description": "Unique identifier of the item to attach a file to.",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "The request body must contain the file to attach as form-data.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "attachments": [
                      {
                        "fileName": "my_file.pdf",
                        "id": "o4lrz575u84koanvu9f5gqv9a9ab92gf",
                        "size": "150193",
                        "sizeName": "146.67 KB",
                        "url": "https://cdn.bitwarden.net/attachments/ba624b21-1c8a-43b3-a713-ae0000eabdec/o4lrz575u84koanvu9f5gqv9a9ab92gf"
                      }
                    ],
                    "collectionIdss": [],
                    "deletedDate": null,
                    "favorite": false,
                    "folderId": null,
                    "id": "ba624b21-1c8a-43b3-a713-ae0000eabdec",
                    "name": "My Secure Note",
                    "notes": "My Secret Information",
                    "object": "item",
                    "organizationId": null,
                    "reprompt": 0,
                    "revisionDate": "2021-12-16T14:14:40.138Z",
                    "secureNote": {
                      "type": 0
                    },
                    "type": 2
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns the item object with new objects in an `\"attachments\":[]` array."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Attach a file to an existing vault item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/confirm/org-member/{id}": {
      "post": {
        "description": "Confirm a member to a specified Organization by specifying a user identifier (e.g. `6b39c966-c776-4ba9-9489-ae320149af01`) in the path and the Organization identifier (e.g. `b64d6e40-adf2-4f46-b4d2-acd40147548a`) as a query parameter.",
        "parameters": [
          {
            "description": "A unique identifier for the user to confirm.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "A unique identifier for the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the user is confirmed to the Organization."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Confirm a member to a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/generate": {
      "get": {
        "description": "Generate a password or passphrase. By default, `/generate` will generate a 14-character password with uppercase characters, lowercase characters, and numbers.",
        "parameters": [
          {
            "description": "Number of characters in the **password**.",
            "in": "query",
            "name": "length",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Include uppercase characters in the **password**.",
            "in": "query",
            "name": "uppercase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include lowercase characters in the **password**.",
            "in": "query",
            "name": "lowercase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include numbers in the **password**.",
            "in": "query",
            "name": "number",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include special characters in the **password**.",
            "in": "query",
            "name": "special",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Generate passphrase (by default, `/generate` will generate a password).",
            "in": "query",
            "name": "passphrase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Number of words in the **passphrase**.",
            "in": "query",
            "name": "words",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Separator character in the **passphrase**.",
            "in": "query",
            "name": "separator",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Title-case the **passphrase**.",
            "in": "query",
            "name": "capitalize",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include numbers in the **passphrase**.",
            "in": "query",
            "name": "includeNumber",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "tJCxG4TABk3P9M",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the generated password or passphrase."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Generate a password or passphrase.",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/list/object/collections": {
      "get": {
        "description": "List Collections from all Organizations of which you are a member. Collections you do not have access to will not be listed.<br><br>By default, this will return a list of all Collections, however you can specify search terms as query parameters to narrow list results.",
        "parameters": [
          {
            "description": "List only Collections that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "applcation/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":`) of Collections as objects. If no Collections are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "List Collections from all member Organizations.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/list/object/folders": {
      "get": {
        "description": "Retrieve a list of folders in your vault. By default, this will return a list of all folders, however you can specify search terms as query parameters to narrow list results.",
        "parameters": [
          {
            "description": "List all folders that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":[]`) of matching folders as objects. If no folders are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a list of folders in your vault.",
        "tags": [
          "Folders"
        ]
      }
    },
    "/list/object/items": {
      "get": {
        "description": "Retrieve a list of existing items in your vault. By default, this will return a list of all existing items in your vault, however you can specify filters or search terms as query parameters to narrow list results.<br><br>Using multiple filters will perform a logical `OR` operation. Using filters **and** search terms will perform a logical `AND` operation.",
        "parameters": [
          {
            "description": "List all items with this unique Organization identifier.",
            "in": "query",
            "name": "organizationId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List all items with this unique collection identifier.",
            "in": "query",
            "name": "collectionId",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List all items with this unique folder identifier.",
            "in": "query",
            "name": "folderid",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List all items with this URL/URI value.",
            "in": "query",
            "name": "url",
            "schema": {
              "format": "url",
              "type": "string"
            }
          },
          {
            "description": "List all items in the trash. This query parameter is not a true boolean, in that `?trash`, `?trash=true`, and `?trash=false` will all be interpretted as a request to list items in the trash.",
            "in": "query",
            "name": "trash",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "List all items that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":[]`) of matching vault items as objects. If no items are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a list of items in your vault.",
        "tags": [
          "Vault Items"
        ]
      }
    },
    "/list/object/org-collections": {
      "get": {
        "description": "List existing Collections from a specified Organization by specifying an Organization idenfitier as a query parameter. Collections you do not have access to will not be listed.<br><br>By default, this will return a list of all Collections, however you can specify search terms as additional query parameters to narrow list results.",
        "parameters": [
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "List only Collections that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":`) of matching Collections as objects. If no Collections are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "List Collections from a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/list/object/org-members": {
      "get": {
        "description": "List members of a specified Organization by specifying an Organization identifier as a query parameter.",
        "parameters": [
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": [
                      {
                        "email": "user@email.com",
                        "id": "94833c6a-9078-4516-ba3c-acd40147547c",
                        "name": "John Doe",
                        "object": "org-member",
                        "status": 2,
                        "twoFactorEnabled": true,
                        "type": 0
                      },
                      {}
                    ],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array of users that are members of the specified Organization. If no users are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "List members of a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/list/object/organizations": {
      "get": {
        "description": "List Organizations of which you are a member. By default, this will return a list of all Organizations, however you can specify search terms as query parameters to narrow list results.",
        "parameters": [
          {
            "description": "List only Organizations that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "applcation/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":`) of Organizations as objects. If no Collections are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "List Organizations of which you are a member.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/list/object/send": {
      "get": {
        "description": "Retrieve a list of Sends. By default, this will return a list of all Send objects, however you can specify search terms as query parameters to narrow list results.<br><br>**Only Text Sends are supported.**",
        "parameters": [
          {
            "description": "List all Sends that contain this search term.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": [],
                    "object": "list"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an array (in `\"data\":[]`) of matching Sends as objects. If no Sends are found, an empty array is returned."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a list of Sends.",
        "tags": [
          "Send"
        ]
      }
    },
    "/lock": {
      "post": {
        "description": "Lock your vault. This action will destroy the session key required to authorize requests to most endpoints.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "message": null,
                    "noColor": false,
                    "object": "message",
                    "title": "Your vault is locked."
                  },
                  "success": true
                },
                "schema": {
                  "$ref": "#/components/schemas/lockunlock.success"
                }
              }
            },
            "description": "Success returns confirmation that your vault is locked."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Lock your vault.",
        "tags": [
          "Lock & Unlock"
        ]
      }
    },
    "/move/{itemid}/{organizationId}": {
      "post": {
        "description": "Move an item to a Collection by specifying an `itemid` and `organizationId` in the path, and specifying one or more Collection identifiers in the request body.",
        "parameters": [
          {
            "description": "Unique identifier of the item to move.",
            "in": "path",
            "name": "itemid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the Organization to move the item to.",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": [
                "75bb2724-abed-4f1f-aa4a-ae530106c958",
                "b64d6e40-adf2-4f46-b4d2-acd40147548a"
              ],
              "schema": {
                "properties": {
                  "array": {
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The request body must contain an array of one or more Collection identifiers.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "collectionIdss": [
                      "75bb2724-abed-4f1f-aa4a-ae530106c958",
                      "b64d6e40-adf2-4f46-b4d2-acd40147548a"
                    ],
                    "deletedDate": null,
                    "favorite": false,
                    "folderId": null,
                    "id": "88aed7f0-0378-4c68-b415-ae5101519054",
                    "login": {
                      "password": "my_password",
                      "passwordRevisionDate": "2022-03-07T20:36:30.103Z",
                      "totp": null,
                      "uris": [],
                      "username": "my_username"
                    },
                    "name": "My Shared Login",
                    "notes": null,
                    "object": "item",
                    "organizationId": "1f1d79f5-992f-42b1-abfd-acd40147547a",
                    "passwordHistory": [
                      {
                        "lastUsedDate": "2022-03-07T20.36.30.103Z",
                        "password": "my_password"
                      }
                    ],
                    "reprompt": 0,
                    "revisionDate": "2022-03-09T17:02:29.853Z",
                    "type": 1
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the moved item with the specified Collections added to `\"collectionIdss\":[]`."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Move an item to a Collection.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/object/attachment/{id}": {
      "delete": {
        "description": "Delete an attachment by specifying the attachment id (e.g. `o4lrz575u84koanvu9f5gqv9a9ab92gf`) in the path and item id (e.g. `ba624b21-1c8a-43b3-a713-ae0000eabdec`) as a query parameter.",
        "parameters": [
          {
            "description": "Unique identifier of the attachment.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the item the file is attached to.",
            "in": "query",
            "name": "itemid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the attachment was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Delete an attachment.",
        "tags": [
          "Attachments & Fields"
        ]
      },
      "get": {
        "description": "Retreive an attachment by specifying the attachment id (e.g. `o4lrz575u84koanvu9f5gqv9a9ab92gf`) in the path and item id (e.g. `ba624b21-1c8a-43b3-a713-ae0000eabdec`) as a query parameter.<br><br>If you're retrieving any file type other than plaintext, we recommend posting the request through a browser window for immediate download.",
        "parameters": [
          {
            "description": "Unique identifier of the attachment.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the item the file is attached to.",
            "in": "query",
            "name": "itemid",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success returns the attached file."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve an attachment.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/exposed/{id}": {
      "get": {
        "description": "Retrieve the number of times a password has been exposed for a login item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "12",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the number of times the item's password has been exposed."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the number of times a password has been exposed for a login item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/fingerprint/me": {
      "get": {
        "description": "Retrieve your fingerprint phrase.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "magician-fruit-justify-tactfulness-cornflake",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing your account fingerprint phrase."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve your fingerprint phrase.",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/object/folder": {
      "post": {
        "description": "Add a folder to your vault.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Folder of Items"
              },
              "schema": {
                "$ref": "#/components/schemas/folder"
              }
            }
          },
          "description": "The request body must contain an object representing the name for the folder to add.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "id": "a0663107-6e57-401f-9e22-ae51015bb2cf",
                    "name": "My Folder",
                    "object": "folder"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing a generated folder `\"id\":` and its `\"name\":`."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Add a folder to your vault.",
        "tags": [
          "Folders"
        ]
      }
    },
    "/object/folder/{id}": {
      "delete": {
        "description": "Delete an existing folder from your vault by specifying the unique folder identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.<br><br>Deleting a folder **will not** delete the items in it.",
        "parameters": [
          {
            "description": "Unique identifier of the item to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the folder was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Delete a folder from your vault.",
        "tags": [
          "Folders"
        ]
      },
      "get": {
        "description": "Retrieve an existing folder from your vault by specifying the unique folder identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "id": "3a84be8d-12e7-4223-98cd-ae0000eabdec",
                    "name": "My Folder",
                    "object": "folder"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the folder's `\"id\":` and `\"name\":`."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a folder from your vault.",
        "tags": [
          "Folders"
        ]
      },
      "put": {
        "description": "Edit an existing folder in your vault by specifying the unique folder identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path and the new folder `\"name\":` in the request body.",
        "parameters": [
          {
            "description": "Unique identifier of the item to edit.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Folder's New Name"
              },
              "schema": {
                "$ref": "#/components/schemas/folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "id": "3a84be8d-12e7-4223-98cd-ae0000eabdec",
                    "name": "My Folder's New Name",
                    "object": "folder"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the folder's pre-existing `\"id\":` and its new `\"name\":`."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Edit a folder in your vault.",
        "tags": [
          "Folders"
        ]
      }
    },
    "/object/item": {
      "post": {
        "description": "Add a new login, card, secure note, or identity to your vault.",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "card": {
                  "value": {
                    "card": {
                      "brand": "visa",
                      "cardholderName": "John Doe",
                      "code": "123",
                      "expMonth": "04",
                      "expYear": "2023",
                      "number": "4242424242424242"
                    },
                    "collectionIds": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                    "favorite": true,
                    "fields": [],
                    "folderId": null,
                    "name": "Company Credit Card",
                    "notes": null,
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d",
                    "reprompt": 0,
                    "type": 3
                  }
                },
                "identity": {
                  "value": {
                    "collectionIds": null,
                    "favorite": false,
                    "fields": [],
                    "folderId": "1f8c544a-a33b-46d9-af7c-ae2800f4a9c8",
                    "identity": {
                      "address1": "123 Any St",
                      "address2": "Apt 123",
                      "address3": null,
                      "city": "New York",
                      "company": "Acme Inc.",
                      "country": "US",
                      "email": "john@company.com",
                      "firstName": "John",
                      "lastName": "Doe",
                      "licenseNumber": "D123-12-123-12333",
                      "middleName": "William",
                      "passportNumber": "US-123456789",
                      "phone": "5555551234",
                      "postalCode": "10001",
                      "ssn": "000-123-4567",
                      "state": "NY",
                      "title": "Mr",
                      "username": "jdoe"
                    },
                    "name": "My Mailing Address",
                    "notes": "Please don't send me mail.",
                    "organizationId": null,
                    "reprompt": 0,
                    "type": 4
                  }
                },
                "login": {
                  "value": {
                    "collectionIds": [
                      "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                      "fcdd8536-539a-422f-8507-af0001348815"
                    ],
                    "favorite": false,
                    "fields": [
                      {
                        "name": "Security Question",
                        "type": 0,
                        "value": "Bitwarden Rules"
                      }
                    ],
                    "folderId": null,
                    "login": {
                      "password": "b@dP@$$word",
                      "totp": null,
                      "uris": [
                        {
                          "match": 0,
                          "uri": "https://twitter.com/login"
                        },
                        {
                          "match": 1,
                          "uri": "https://twitter.co.uk/login"
                        }
                      ],
                      "username": "twitter@acmecorp.com"
                    },
                    "name": "Shared Twitter Account",
                    "notes": null,
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d",
                    "reprompt": 0,
                    "type": 1
                  }
                },
                "secureNote": {
                  "value": {
                    "collectionIds": null,
                    "favorite": false,
                    "fields": [],
                    "folderId": "1f8c544a-a33b-46d9-af7c-ae2800f4a9c8",
                    "name": "Steps to World Domination",
                    "notes": "1) Use Bitwarden, 2) Profit",
                    "organizationId": null,
                    "reprompt": 0,
                    "secureNote": {
                      "type": 0
                    },
                    "type": 2
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/item.template"
              }
            }
          },
          "description": "The request body must contain an object representing the item to add to your Vault. Indicate [item type](https://bitwarden.com/help/cli/#item-types) with `\"type\":` and only provide data in the appropriate type's object (e.g. `\"login\":{}` or `\"identity\":{}`). See the **Examples** for help.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "deleteDate": null,
                  "revisionDate": "2022-03-07T20:13:51.536Z",
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the created item in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Add a new item to your vault.",
        "tags": [
          "Vault Items"
        ]
      }
    },
    "/object/item/{id}": {
      "delete": {
        "description": "Delete an existing item from your vault by specifying the unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the item was sent to the trash."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Delete an item from your vault.",
        "tags": [
          "Vault Items"
        ]
      },
      "get": {
        "description": "Retrieve an existing item from your vault by specifying a unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "deleteDate": null,
                  "revisionDate": "2022-03-07T20:13:51.536Z",
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the retrieved item in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve an item from your vault.",
        "tags": [
          "Vault Items"
        ]
      },
      "put": {
        "description": "Edit an existing login, card, secure note, or identity in your Vault by specifying a unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path and the new object contents in the request body.",
        "parameters": [
          {
            "description": "Unique identifier of the item to edit.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "card": {
                  "value": {
                    "card": {
                      "brand": "visa",
                      "cardholderName": "John Doe",
                      "code": "123",
                      "expMonth": "04",
                      "expYear": "2023",
                      "number": "4242424242424242"
                    },
                    "collectionIds": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                    "favorite": true,
                    "fields": [],
                    "folderId": null,
                    "name": "Company Credit Card",
                    "notes": null,
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d",
                    "reprompt": 1,
                    "type": 3
                  }
                },
                "identity": {
                  "value": {
                    "collectionIds": null,
                    "favorite": false,
                    "fields": [],
                    "folderId": "1f8c544a-a33b-46d9-af7c-ae2800f4a9c8",
                    "identity": {
                      "address1": "123 Any St",
                      "address2": "Apt 123",
                      "address3": null,
                      "city": "New York",
                      "company": "Acme Inc.",
                      "country": "US",
                      "email": "john@company.com",
                      "firstName": "John",
                      "lastName": "Doe",
                      "licenseNumber": "D123-12-123-12333",
                      "middleName": "William",
                      "passportNumber": "US-123456789",
                      "phone": "5555551234",
                      "postalCode": "10001",
                      "ssn": "000-123-4567",
                      "state": "NY",
                      "title": "Mr",
                      "username": "jdoe"
                    },
                    "name": "My Mailing Address",
                    "notes": "Please don't send me mail.",
                    "organizationId": null,
                    "reprompt": 0,
                    "type": 4
                  }
                },
                "login": {
                  "value": {
                    "collectionIds": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                    "favorite": false,
                    "fields": [
                      {
                        "name": "Security Question",
                        "type": 0,
                        "value": "Bitwarden Rules"
                      }
                    ],
                    "folderId": null,
                    "login": {
                      "password": "b@dP@$$word",
                      "totp": null,
                      "uris": [
                        {
                          "match": 0,
                          "uri": "https://twitter.com/login"
                        }
                      ],
                      "username": "twitter@acmecorp.com"
                    },
                    "name": "Shared Twitter Account",
                    "notes": null,
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d",
                    "reprompt": 0,
                    "type": 1
                  }
                },
                "secureNote": {
                  "value": {
                    "collectionIds": null,
                    "favorite": false,
                    "fields": [],
                    "folderId": "1f8c544a-a33b-46d9-af7c-ae2800f4a9c8",
                    "name": "Steps to World Domination",
                    "notes": "1) Use Bitwarden, 2) Profit",
                    "organizationId": null,
                    "reprompt": 0,
                    "secureNote": {
                      "type": 0
                    },
                    "type": 2
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/item.template"
              }
            }
          },
          "description": "The request body must contain an object representing the edits to make to the item.<br><br>**Include the full object in the request body**, not just the properties to edit, as the new object will replace the pre-existing object.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {},
                  "deleteDate": null,
                  "revisionDate": "2022-03-07T20:13:51.536Z",
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the edited item in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Edit an item in your Vault.",
        "tags": [
          "Vault Items"
        ]
      }
    },
    "/object/notes/{id}": {
      "get": {
        "description": "Retrieve the notes of an item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "This is note text.",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the notes for the item."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the notes of an item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/org-collection": {
      "post": {
        "description": "Create a collection for a specified Organization by specifying a unique Organization identifier as a query parameter and Collection information in the request body, including its `\"name\":` and an array of `\"groups\":` to add it to.",
        "parameters": [
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "externalid": null,
                "groups": [
                  {
                    "hidePasswords": false,
                    "id": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                    "readOnly": false
                  }
                ],
                "name": "Shared Logins",
                "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d"
              },
              "schema": {
                "$ref": "#/components/schemas/collection"
              }
            }
          },
          "description": "The request body must contain an object representing the Collection to add. Specifying `\"groups\":` is optional."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "externalId": null,
                    "groups": [
                      {
                        "hidePasswords": false,
                        "id": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                        "readOnly": false
                      }
                    ],
                    "id": "da245883-ae20-41c6-b719-ae520141c840",
                    "name": "Shared Logins",
                    "object": "org-collection",
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the created Collection."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Create a Collection for a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/object/org-collection/{id}": {
      "delete": {
        "description": "Delete an existing Collection from a specified Organization by specifying the unique Collection identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path and an Organization identifier as a query parameter.<br><br>Deleting a Collection **will not** delete the items in it.",
        "parameters": [
          {
            "description": "Unique identifier of the Collection.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the Collection was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Delete a Collection from a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      },
      "get": {
        "description": "Retrieve an existing collection from a specified Organization by specifying the unique Collection identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path and an Organization identifier as a query parameter .",
        "parameters": [
          {
            "description": "Unique identifier of the Collection.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "externalId": null,
                    "groups": [
                      {
                        "hidePasswords": false,
                        "id": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                        "readOnly": false
                      }
                    ],
                    "name": "Shared Credentials",
                    "object": "org-collection",
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns a JSON object representing the retrieved Collection in the `\"data\":` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Request."
          }
        },
        "summary": "Retrieve a Collection from a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      },
      "put": {
        "description": "Edit an existing Collection in a specified Organization by specifying the unique collection identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path, an Organization identifier as a query parameter, and Collection information in the request body.",
        "parameters": [
          {
            "description": "Unique identifier of the Collection.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the Organization.",
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "externalid": null,
                "groups": [
                  {
                    "hidePasswords": false,
                    "id": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                    "readOnly": false
                  }
                ],
                "name": "Shared Logins",
                "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d"
              },
              "schema": {
                "$ref": "#/components/schemas/collection"
              }
            }
          },
          "description": "The request body must contain an object representing the Collection to edit. Specifying `\"groups\":` is optional."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "externalId": null,
                    "groups": [
                      {
                        "hidePasswords": false,
                        "id": "c4e31257-f3e1-4b13-895a-ae2700f9884e",
                        "readOnly": false
                      }
                    ],
                    "name": "Shared Credentials",
                    "object": "org-collection",
                    "organizationId": "3c89a31d-f1cc-4673-8d5a-ae2700f9860d"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the edited Collection."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Request."
          }
        },
        "summary": "Edit a Collection in a specified Organization.",
        "tags": [
          "Collections & Organizations"
        ]
      }
    },
    "/object/password/{id}": {
      "get": {
        "description": "Retrieve the password of a login item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "p@$$w0rD",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing password of the item."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the password of a login item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/send": {
      "post": {
        "description": "Create a Send.<br><br>**Only Text Sends are supported.**",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deletionDate": "2022-03-21T19:06:53.810Z",
                "disabled": false,
                "expirationDate": "2022-03-21T19:06:53.810Z",
                "file": null,
                "hideEmail": true,
                "maxAccessCount": 3,
                "name": "My Text Send",
                "notes": "Notes for the text send.",
                "password": "P@ssw0Rd",
                "text": {
                  "hidden": true,
                  "text": "Secret Information"
                },
                "type": 0
              },
              "schema": {
                "$ref": "#/components/schemas/send.template"
              }
            }
          },
          "description": "The request body must contain an object representing the Send to create. Use `\"type\":0` to indicate text and provide the `\"text\":{}` object.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "accessCount": 0,
                    "accessId": "cLATVsWqrEWJ_q5SAQdQ9g",
                    "accessUrl": "https://vault.bitwarden.com/#/send/cLATVsWqrEWJ_q5SAQdQ9g/VNFbJhZVRtLsfVL2pTOr-A",
                    "deletionDate": "2022-03-21T19:06:53.810Z",
                    "disabled": false,
                    "expirationDate": "2022-03-21T19:06:53.810Z",
                    "hideEmail": true,
                    "id": "5613b070-aac5-45ac-89fe-ae52010750f6",
                    "key": "VNFbJhZVRtLsfVL2pTOr+A==",
                    "maxAccessCount": 3,
                    "name": "My Text Send",
                    "notes": "Notes for this send.",
                    "object": "send",
                    "passwordSet": true,
                    "revisionDate": "2022-03-08T15:58:42.136Z",
                    "text": {
                      "hidden": true,
                      "text": "Secret Information"
                    },
                    "type": 1
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the created Send in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Create a Send.",
        "tags": [
          "Send"
        ]
      }
    },
    "/object/send/{id}": {
      "delete": {
        "description": "Delete an existing Send by specifying the unique object identifier (e.g. `e813e187-70e3-4feb-950a-ae52010c4b56`) in the path.<br><br>**Only Text Sends are supported.**",
        "parameters": [
          {
            "description": "Unique identifier of the Send to delete.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the Send was deleted."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Delete a Send.",
        "tags": [
          "Send"
        ]
      },
      "get": {
        "description": "Retrieve a Send by specifying the unique object identifier (e.g. `e813e187-70e3-4feb-950a-ae52010c4b56`) in the path.<br><br>**Only Text Sends are supported.**",
        "parameters": [
          {
            "description": "Unique identifier of the Send to retrieve.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "accessCount": 0,
                    "accessId": "cLATVsWqrEWJ_q5SAQdQ9g",
                    "accessUrl": "https://vault.bitwarden.com/#/send/cLATVsWqrEWJ_q5SAQdQ9g/VNFbJhZVRtLsfVL2pTOr-A",
                    "deletionDate": "2022-03-21T19:06:53.810Z",
                    "disabled": false,
                    "expirationDate": "2022-03-21T19:06:53.810Z",
                    "hideEmail": true,
                    "id": "5613b070-aac5-45ac-89fe-ae52010750f6",
                    "key": "VNFbJhZVRtLsfVL2pTOr+A==",
                    "maxAccessCount": 3,
                    "name": "My Text Send",
                    "notes": "Notes for this send.",
                    "object": "send",
                    "passwordSet": true,
                    "revisionDate": "2022-03-08T15:58:42.136Z",
                    "text": {
                      "hidden": true,
                      "text": "Secret Information"
                    },
                    "type": 1
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the retrieved Send in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a Send.",
        "tags": [
          "Send"
        ]
      },
      "put": {
        "description": "Edit an existing Send by specifying the unique object identifier (e.g. `e813e187-70e3-4feb-950a-ae52010c4b56`) in the path and the new object contents in the request body.<br><br> **Only Text Sends are supported.**",
        "parameters": [
          {
            "description": "Unique identifier of the Send to edit.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "deletionDate": "2022-03-21T19:06:53.810Z",
                "disabled": false,
                "expirationDate": "2022-03-21T19:06:53.810Z",
                "file": null,
                "hideEmail": true,
                "maxAccessCount": 3,
                "name": "My Text Send",
                "notes": "Notes for the text send.",
                "password": "P@ssw0Rd",
                "text": {
                  "hidden": true,
                  "text": "Secret Information"
                },
                "type": 0
              },
              "schema": {
                "$ref": "#/components/schemas/send.template"
              }
            }
          },
          "description": "The request body must contain an object representing the edits to make to the Send.<br><br>**Include the full object in the request body**, not just the properties to edit, as the new object will replace the pre-existing Send object.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "accessCount": 0,
                    "accessId": "cLATVsWqrEWJ_q5SAQdQ9g",
                    "accessUrl": "https://vault.bitwarden.com/#/send/cLATVsWqrEWJ_q5SAQdQ9g/VNFbJhZVRtLsfVL2pTOr-A",
                    "deletionDate": "2022-03-21T19:06:53.810Z",
                    "disabled": false,
                    "expirationDate": "2022-03-21T19:06:53.810Z",
                    "hideEmail": true,
                    "id": "5613b070-aac5-45ac-89fe-ae52010750f6",
                    "key": "VNFbJhZVRtLsfVL2pTOr+A==",
                    "maxAccessCount": 3,
                    "name": "My Text Send",
                    "notes": "Notes for this send.",
                    "object": "send",
                    "passwordSet": true,
                    "revisionDate": "2022-03-08T15:58:42.136Z",
                    "text": {
                      "hidden": true,
                      "text": "Secret Information"
                    },
                    "type": 1
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the edited Send in the `\"data\":{}` property."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Edit a Send.",
        "tags": [
          "Send"
        ]
      }
    },
    "/object/template/{type}": {
      "get": {
        "description": "Retreive a JSON template for any object, including vault items, sends, folders, and more. Templates can be used to guide you in creation of new objects.",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "item",
                "item.field",
                "item.login",
                "item.login.uri",
                "item.card",
                "item.identity",
                "item.securenote",
                "folder",
                "collection",
                "item-collections",
                "org-collection"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "object": "template",
                    "template": {
                      "password": "myp@ssword123",
                      "totp": "JBSWY3DPEHPK3PXP",
                      "uris": [],
                      "username": "jdoe"
                    }
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the template for the specified type."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve a JSON template for any object.",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/object/totp/{id}": {
      "get": {
        "description": "Retrieve the TOTP code of a login item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "836471",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the current TOTP code for the item."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the TOTP code of a login item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/uri/{id}": {
      "get": {
        "description": "Retrieve the URI of a login item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "https://google.com",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing the first URI for the item."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the URI of a login item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/object/username/{id}": {
      "get": {
        "description": "Retrieve the username of a login item by specifying the item's unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "data": "my_username",
                    "object": "string"
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object containing username of the item."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Retrieve the username of a login item.",
        "tags": [
          "Attachments & Fields"
        ]
      }
    },
    "/restore/item/{id}": {
      "post": {
        "description": "Restore an item that was sent to the trash by specifying the unique object identifier (e.g. `3a84be8d-12e7-4223-98cd-ae0000eabdec`) in the path.",
        "parameters": [
          {
            "description": "Unique identifier of the item to restore.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "success": true
                }
              }
            },
            "description": "Success returns confirmation that the item was restored."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Restore a deleted item.",
        "tags": [
          "Vault Items"
        ]
      }
    },
    "/send/{id}/remove-password": {
      "post": {
        "description": "Remove the password from a Send.<br><br>**Only Text Sends are supported.**",
        "parameters": [
          {
            "description": "Unique identifier of the Send.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "accessCount": 0,
                    "accessId": "cLATVsWqrEWJ_q5SAQdQ9g",
                    "accessUrl": "https://vault.bitwarden.com/#/send/cLATVsWqrEWJ_q5SAQdQ9g/VNFbJhZVRtLsfVL2pTOr-A",
                    "deletionDate": "2022-03-21T19:06:53.810Z",
                    "disabled": false,
                    "expirationDate": "2022-03-21T19:06:53.810Z",
                    "hideEmail": true,
                    "id": "5613b070-aac5-45ac-89fe-ae52010750f6",
                    "key": "VNFbJhZVRtLsfVL2pTOr+A==",
                    "maxAccessCount": 3,
                    "name": "My Text Send",
                    "notes": "Notes for this send.",
                    "object": "send",
                    "passwordSet": false,
                    "revisionDate": "2022-03-08T15:58:42.136Z",
                    "text": {
                      "hidden": true,
                      "text": "Secret Information"
                    },
                    "type": 1
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object representing the Send with `\"passwordSet\":\"false\"` inside the object."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Remove the password from a Send.",
        "tags": [
          "Send"
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Get the current `serverURL`, `lastSync`, `userEmail`, `userID`, and `status` of your Bitwarden CLI client.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "object": "template",
                    "template": {
                      "lastSync": "2022-03-09T17:52:10.775Z",
                      "serverUrl": "https://vault.bitwarden.com",
                      "status": "unlocked",
                      "userEmail": "user@bitwarden.com",
                      "userId": "b6a7d36a-3550-4ed9-865a-ade300f0d066"
                    }
                  },
                  "success": true
                },
                "schema": {
                  "$ref": "#/components/schemas/status"
                }
              }
            },
            "description": "Success returns an object containing status information about your Bitwarden CLI client."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Get the status of the Bitwarden CLI.",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/sync": {
      "post": {
        "description": "Sync your vault.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "message": null,
                    "noColor": false,
                    "object": "message",
                    "title": "Syncing complete."
                  },
                  "success": true
                }
              }
            },
            "description": "Success returns an object confirming successful sync."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Sync your vault.",
        "tags": [
          "Miscellaneous"
        ]
      }
    },
    "/unlock": {
      "post": {
        "description": "Unlock your vault. This action will create the session key required to authorize requests to most endpoints.",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "password": "myp@$$w0rd"
              },
              "schema": {
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "The request body must contain an object containing your master password.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "data": {
                    "message": "To unlock your vault, set your session key to the `BW_SESSION` environment variable. ex:$ export BW_SESSION=\\\"vdXQ7mRYtcFXueH/Ml+ZgvK//V+0cTJpuAVddMwttNEvVHU6d6xaaRdYokv/9Jqw1uofMq82/B3y/MpV2Yh3Qg==\\\" or > $env:BW_SESSION=\\\"vdXQ7mRYtcFXueH/Ml+ZgvK//V+0cTJpuAVddMwttNEvVHU6d6xaaRdYokv/9Jqw1uofMq82/B3y/MpV2Yh3Qg==\\\". You can also pass the session key to any command with the `--session` option. ex:$ bw list items --session vdXQ7mRYtcFXueH/Ml+ZgvK//V+0cTJpuAVddMwttNEvVHU6d6xaaRdYokv/9Jqw1uofMq82/B3y/MpV2Yh3Qg==\"",
                    "noColor": false,
                    "object": "message",
                    "raw": "vdXQ7mRYtcFXueH/Ml+ZgvK//V+0cTJpuAVddMwttNEvVHU6d6xaaRdYokv/9Jqw1uofMq82/B3y/MpV2Yh3Qg==",
                    "title": "Your vault is now unlocked!"
                  },
                  "success": true
                },
                "schema": {
                  "$ref": "#/components/schemas/lockunlock.success"
                }
              }
            },
            "description": "Success will return confirmation that your vault is unlocked and a session key. You **do not** need to do anything with the session key to proceed."
          },
          "400": {
            "description": "Bad Request."
          },
          "404": {
            "description": "Not Found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        },
        "summary": "Unlock your vault.",
        "tags": [
          "Lock & Unlock"
        ]
      }
    }
  }
}
