[project]
name = "bw-serve-client"
version = "0.1.1"
description = "Bitwarden CLI Vault Management API"
authors = [
    {name = "Alan Young", email = "harleypig@harleypig.com"}
]
license = "MIT"
readme = "README.md"
keywords = ["Vault Management API", "vaultwarden", "bitwarden", "api-client", "python"]
requires-python = ">=3.10,<4.0"
dependencies = [
    "aenum>=3.1.11",
    "openapi-spec-validator[dev]>=0.7.2,<0.8.0",
    "pydantic>=2.0.0,<3.0.0",
    "python-dateutil>=2.5.3",
    "requests>=2.25.0,<3.0.0",
    "urllib3>=1.25.3,<2.1.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/harleypig/bw-serve-client"
Repository = "https://github.com/harleypig/bw-serve-client"
Documentation = "https://harleypig.github.io/bw-serve-client"
"Bug Tracker" = "https://github.com/harleypig/bw-serve-client/issues"
Changelog = "https://github.com/harleypig/bw-serve-client/blob/main/CHANGELOG.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [{include = "bw_serve_client"}]
exclude = ["scripts/**"]

[tool.poetry.dependencies]
aenum = ">=3.1.11"
openapi-spec-validator = {extras = ["dev"], version = ">=0.7.2,<0.8.0"}
pydantic = ">=2.0.0,<3.0.0"
python = ">=3.10,<4.0"
python-dateutil = ">=2.5.3"
requests = ">=2.25.0,<3.0.0"
urllib3 = ">=1.25.3,<2.1.0"

[tool.poetry.group.dev.dependencies]
bandit = ">=1.7.5,<2.0.0"
bump2version = ">=1.0.1,<2.0.0"
datamodel-code-generator = ">=0.35.0,<0.36.0"
deepdiff = {extras = ["cli"], version = "^8.6.1"}
dlint = "^0.16.0"
flake8 = ">=4.0.0"
flake8-aaa = "^0.17.0"
flake8-annotations = "^3.2.0"
flake8-annotations-complexity = "^0.1.0"
flake8-assertive = "^2.2.0"
flake8-bugbear = ">=24.12.12,<25.0.0"
flake8-clean-block = "^0.1.2"
flake8-comprehensions = "^3.17.0"
flake8-docstrings = "^1.7.0"
flake8-docstrings-complete = "^1.4.1"
flake8-isort = "^6.1.2"
flake8-logging = "^1.8.0"
flake8-markdown = "^0.6.0"
flake8-picky-parentheses = "^0.6.0"
flake8-pydocstyle = "^0.2.5"
flake8-pyprojecttoml = ">=0.0.2,<0.0.3"
flake8-pytest-style = "^2.2.0"
flake8-raise = "^0.0.5"
flake8-return = "^1.2.0"
flake8-rst-docstrings = "^0.4.0"
flake8-secure-coding-standard = "^1.4.1"
flake8-simplify = ">=0.22.0,<0.23.0"
flake8-type-checking = "^3.0.0"
flake8-typing-imports = "^1.17.0"
flake8-unused-arguments = "^0.0.13"
isort = ">=5.12.0,<6.0.0"
pbr = ">=5.11.0,<6.0.0"
pydoclint = "^0.7.3"
pydocstringformatter = ">=0.7.0"
pydocstyle = {extras = ["toml"], version = "^6.3.0"}
pyright = ">=1.1.406,<2.0.0"
setuptools = ">=65.0.0"
setuptools-scm = ">=9.2.1,<10.0.0"
tox = ">=3.9.0"
tryceratops = "^2.4.1"
types-python-dateutil = ">=2.8.0"
types-urllib3 = ">=1.26.0"
yamllint = ">=1.37.1"
yapf = ">=0.40.2,<1.0.0"

[tool.poetry.group.test.dependencies]
pytest = ">=7.2.1"
pytest-cov = ">=2.8.1"
pytest-mock = ">=3.12.0,<4.0.0"
pytest-randomly = ">=3.12.0"

[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.5.3,<2.0.0"
sphinx = ">=7.2.6,<8.0.0"
sphinx-autodoc-typehints = ">=2.0.0,<3.0.0"
sphinxcontrib-email = ">=0.3.6,<1.0.0"
sphinxcontrib-openapi = ">=0.8.4,<1.0.0"
sphinx-lint = ">=0.9.1,<1.0.0"
sphinx-rtd-theme = ">=3.0.0,<4.0.0"


[tool.pydocstringformatter]
style = ["pep257","numpydoc"]
max-line-length = 132
summary-quotes-same-line = true
linewrap-full-docstring = true

[tool.pyright]
include = ["bw_serve_client", "scripts", "tests"]
exclude = ["**/__pycache__"]
pythonVersion = "3.10"
typeCheckingMode = "basic"

[tool.flake8]
# Match yapf configuration
max-line-length = 132

# Enable bugbear rules (B-series)
# Enable docstrings (DOC-series)
# Enable tryceratops rules (TRY-series)
extend-select = ["B9","DOC","TRY"]

extend-ignore = [
  # indentation not multiple of 4 since we use 2-space indentation
  "E111", "E114", "E122", "E131",

  "D107",   # Conflicts with DOC301 - __init__ methods should not have docstrings
  "D203",   # Blank line before class docstring (conflicts with pydocstringformatter)
  "D213",   # Multi-line docstring summary on first line (conflicts with pydocstringformatter)
  "D406",   # Section name should end with newline (conflicts with Google-style docstrings)
  "D407",   # Missing dashed underline after section (conflicts with Google-style docstrings)
  "D413",   # Missing blank line after last section (conflicts with pydocstringformatter)
  "DCO010", # Conflicts with DOC301 - __init__ methods should not have docstrings
  "E251",   # unexpected spaces around keyword/parameter equals to match yapf style
  "PAR103", # Nope
  "R505",   # elif after return/raise is often semantically correct
  "R506",   # elif after raise statement is often semantically correct
  "RST203", # Definition list formatting is often overly strict
  "TRY003", # Long error messages in raise statements are often more readable
  "TRY101", # Too many try blocks is often overly restrictive
  "TRY300", # Moving returns to else blocks often reduces readability
  "TRY301", # Abstracting raise to inner function often adds unnecessary complexity

  # Basic formatting rules - disabled due to conflict with yapf formatting
  "B950", # line too long (over 132
  "E116", # unexpected indentation (comment)
  "E117", # over-indented (comment)

  # Work on fixing these if possible
  "D211", # No blank lines before class docstring (conflicts with D203)
  "E501", # line too long in favor of bugbear's B950

]


# Per-file ignores
per-file-ignores = [
  # Ignore CLB100 in tests (conflicts with AAA patterns)
  # Ignore SCS108 in tests (tests need asserts)
  # XXX: Fix AAA violations
  "tests/*:CLB100,SCS108,AAA01",
  # Ignore TYP001 in generated models (type checking imports not properly guarded)
  # Ignore D101 in generated models (parameter classes don't get docstrings from datamodel-codegen)
  # Ignore D204 and DCO060 in generated models (docstring formatting issues from datamodel-codegen)
  "bw_serve_client/models.py:D101,TYP001,D101,D204,DCO060,PAR101",
]

# dlint
print-dlint-linters = true

# assertive
assertive-test-pattern = "tests/**"

# bugbear
extend-immutable-calls = ["pathlib.Path","Path"]

# docstrings
docstring-convention = "pep257"

# logging format
enable-extra-whitelist = true

# type-checking
type-checking-pydantic-enabled = true

# unused-arguments
unused-arguments-ignore-dunder = true

# typing-imports
min-python-version = "3.10"

# mccabe
max-complexity = 10

# pyflakes
doctests = true

[tool.tryceratops]
experimental = false

[tool.isort]
profile = "google"
line_length = 132
indent = "  "

[tool.pydocstyle]
convention = "google"
# Conflicts with DOC301 - __init__ methods should not have docstrings
add_ignore = ["D101","D107"]

[tool.yapf]
# Use PEP8 style as the base
based_on_style = "google"

# Basic formatting
indent_width = 2
column_limit = 132
continuation_indent_width = 2

# Whitespace and docstring settings
allow_multiline_dictionary_keys = true
allow_multiline_lambdas = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = true
indent_dictionary_value = true
spaces_before_comment = 2

# Bracket handling
coalesce_brackets = true
dedent_closing_brackets = true
align_closing_bracket_with_visual_indent = false
split_before_closing_bracket = true

# Line splitting behavior
split_before_arithmetic_operator = true
split_before_dict_set_generator = true
split_before_first_argument = true
split_before_named_assigns = true
split_before_expression_after_opening_paren = false
split_penalty_after_opening_bracket = 0
split_penalty_after_unary_operator = 10000
split_penalty_for_added_line_split = 30
split_penalty_excess_character = 7000

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bw_serve_client",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["bw_serve_client"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
recursive = true
exclude_dirs = ["tests"]
aggregate = "file"
skips = [
  "B101",
  "B601",
]

[tool.datamodel-codegen]
# XXX: custom-formatters to mimic pre-commit fix config
formatters = ["isort"]
input = "scripts/vault-management-api-fixed.json"
input-file-type = "openapi"
output = "bw_serve_client/models.py"

output-model-type = "pydantic_v2.BaseModel"

# Typing customization
base-class = "pydantic.BaseModel"
enum-field-as-literal = "one"
field-constraints = true
set-default-enum-member = true
use-annotated = true
use-union-operator = true
use-generic-container-types = true

# Field customization
capitalise-enum-members = true
snake-case-field = true
strip-default-none = true
union-mode = "smart"
use-default = true
use-default-kwarg = true
use-field-description = false

# Model customization
allow-population-by-field-name = true
collapse-root-models = true
disable-appending-item-suffix = true
disable-timestamp = true
enable-version-header = true
extra-fields = "forbid"
# keep-model-order = true
output-datetime-class = "AwareDatetime"
reuse-model = true
target-python-version = "3.10"
use-schema-description = true
use-title-as-name = true

# Template Customization
custom-file-header-path = "scripts/generated-header.txt"
encoding = "utf8"
use-double-quotes = true
wrap-string-literal = true

# Import customization
use-type-checking = true

# Docstring customization

# OpenAPI options
include-path-parameters = true
openapi-scopes = ["schemas","paths","parameters"]
strict-nullable = true
#use-operation-id-as-name = true
